basePath: /api/v1
definitions:
  dto.BackupAccount:
    properties:
      bucket:
        type: string
      createdAt:
        type: string
      credential:
        type: string
      credentialVars:
        type: object
      name:
        type: string
      status:
        type: string
      type:
        type: string
      updatedAt:
        type: string
    type: object
  dto.BackupAccountRequest:
    properties:
      bucket:
        type: string
      credentialVars:
        type: object
      name:
        type: string
      type:
        type: string
    required:
    - bucket
    - credentialVars
    - name
    - type
    type: object
  dto.Cluster:
    properties:
      architectures:
        type: string
      createdAt:
        type: string
      dirty:
        type: boolean
      logId:
        type: string
      multiClusterRepositories:
        items:
          $ref: '#/definitions/model.MultiClusterRepository'
        type: array
      multiClusterRepository:
        type: string
      name:
        type: string
      nodeSize:
        type: integer
      preStatus:
        type: string
      provider:
        type: string
      source:
        type: string
      spec:
        $ref: '#/definitions/model.ClusterSpec'
        type: object
      status:
        type: string
      updatedAt:
        type: string
    type: object
  dto.ClusterBackupFileCreate:
    properties:
      clusterBackupStrategyId:
        type: string
      clusterName:
        type: string
      folder:
        type: string
      name:
        type: string
    required:
    - clusterBackupStrategyId
    - clusterName
    type: object
  dto.ClusterBackupFileRestore:
    properties:
      backupAccount:
        $ref: '#/definitions/model.BackupAccount'
        type: object
      clusterName:
        type: string
      file:
        $ref: '#/definitions/model.ClusterBackupFile'
        type: object
      name:
        type: string
    required:
    - clusterName
    - name
    type: object
  dto.ClusterBackupStrategy:
    properties:
      backupAccountId:
        type: string
      backupAccountName:
        type: string
      clusterId:
        type: string
      clusterName:
        type: string
      createdAt:
        type: string
      cron:
        type: integer
      id:
        type: string
      saveNum:
        type: integer
      status:
        type: string
      updatedAt:
        type: string
    type: object
  dto.ClusterBackupStrategyRequest:
    properties:
      backupAccountName:
        type: string
      clusterName:
        type: string
      cron:
        type: integer
      id:
        type: string
      saveNum:
        type: integer
      status:
        type: string
    required:
    - backupAccountName
    - clusterName
    type: object
  dto.ClusterCreate:
    properties:
      architectures:
        type: string
      calicoIpv4PoolIpip:
        type: string
      clusterCidr:
        type: string
      containerdStorageDIr:
        type: string
      dockerStorageDIr:
        type: string
      dockerSubnet:
        type: string
      flannelBackend:
        type: string
      helmVersion:
        type: string
      ingressControllerType:
        type: string
      kubeProxyMode:
        type: string
      kubernetesAudit:
        type: string
      maxClusterServiceNum:
        type: integer
      maxNodePodNum:
        type: integer
      name:
        type: string
      networkInterface:
        type: string
      networkType:
        type: string
      nodes:
        items:
          $ref: '#/definitions/dto.NodeCreate'
        type: array
      plan:
        type: string
      projectName:
        type: string
      provider:
        type: string
      runtimeType:
        type: string
      supportGpu:
        type: string
      version:
        type: string
      workerAmount:
        type: integer
      yumOperate:
        type: string
    required:
    - name
    - version
    type: object
  dto.Credential:
    properties:
      createdAt:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
      privateKey:
        type: string
      type:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  dto.CredentialCreate:
    properties:
      name:
        type: string
      password:
        type: string
      privateKey:
        type: string
      type:
        type: string
      username:
        type: string
    required:
    - name
    - type
    - username
    type: object
  dto.CredentialUpdate:
    properties:
      password:
        type: string
      privateKey:
        type: string
      type:
        type: string
      username:
        type: string
    required:
    - type
    type: object
  dto.Host:
    properties:
      architecture:
        type: string
      clusterId:
        type: string
      clusterName:
        type: string
      cpuCore:
        type: integer
      createdAt:
        type: string
      credentialId:
        type: string
      datastore:
        type: string
      gpuInfo:
        type: string
      gpuNum:
        type: integer
      hasGpu:
        type: boolean
      ip:
        type: string
      memory:
        type: integer
      message:
        type: string
      name:
        type: string
      os:
        type: string
      osVersion:
        type: string
      port:
        type: integer
      projectName:
        type: string
      status:
        type: string
      updatedAt:
        type: string
      volumes:
        items:
          $ref: '#/definitions/model.Volume'
        type: array
      zoneId:
        type: string
      zoneName:
        type: string
    type: object
  dto.HostCreate:
    properties:
      credentialId:
        type: string
      ip:
        type: string
      name:
        type: string
      port:
        type: integer
    required:
    - credentialId
    - ip
    - name
    - port
    type: object
  dto.Ip:
    properties:
      address:
        type: string
      clusterId:
        type: string
      createdAt:
        type: string
      dns1:
        type: string
      dns2:
        type: string
      gateway:
        type: string
      id:
        type: string
      ipPool:
        $ref: '#/definitions/model.IpPool'
        type: object
      ipPoolId:
        type: string
      status:
        type: string
      updatedAt:
        type: string
    type: object
  dto.IpCreate:
    properties:
      dns1:
        type: string
      dns2:
        type: string
      gateway:
        type: string
      ipEnd:
        type: string
      ipPoolName:
        type: string
      ipStart:
        type: string
      subnet:
        type: string
    type: object
  dto.IpPool:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      ipUsed:
        type: integer
      ips:
        items:
          $ref: '#/definitions/model.Ip'
        type: array
      name:
        type: string
      subnet:
        type: string
      updatedAt:
        type: string
    type: object
  dto.IpPoolCreate:
    properties:
      description:
        type: string
      dns1:
        type: string
      dns2:
        type: string
      gateway:
        type: string
      ipEnd:
        type: string
      ipStart:
        type: string
      name:
        type: string
      subnet:
        type: string
    type: object
  dto.IpUpdate:
    properties:
      address:
        type: string
      operation:
        type: string
    type: object
  dto.LoginCredential:
    properties:
      authMethod:
        type: string
      captchaId:
        type: string
      code:
        type: string
      language:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  dto.NodeCreate:
    properties:
      hostName:
        type: string
      role:
        type: string
    type: object
  dto.Plan:
    properties:
      createdAt:
        type: string
      deployTemplate:
        type: string
      id:
        type: string
      name:
        type: string
      planVars:
        type: object
      regionId:
        type: string
      regionName:
        type: string
      updatedAt:
        type: string
      vars:
        type: string
      zoneNames:
        items:
          type: string
        type: array
    type: object
  dto.PlanCreate:
    properties:
      deployTemplate:
        type: string
      name:
        type: string
      planVars:
        type: object
      projects:
        items:
          type: string
        type: array
      region:
        type: string
      zones:
        items:
          type: string
        type: array
    required:
    - deployTemplate
    - name
    - planVars
    - projects
    - region
    - zones
    type: object
  dto.Profile:
    properties:
      token:
        type: string
      user:
        $ref: '#/definitions/dto.SessionUser'
        type: object
    type: object
  dto.Project:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  dto.ProjectCreate:
    properties:
      description:
        type: string
      name:
        type: string
      userName:
        type: string
    required:
    - name
    - userName
    type: object
  dto.ProjectMember:
    properties:
      createdAt:
        type: string
      email:
        type: string
      projectId:
        type: string
      role:
        type: string
      updatedAt:
        type: string
      userId:
        type: string
      userName:
        type: string
    type: object
  dto.ProjectMemberCreate:
    properties:
      projectName:
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - projectName
    - role
    - username
    type: object
  dto.ProjectUpdate:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  dto.Region:
    properties:
      createdAt:
        type: string
      datacenter:
        type: string
      id:
        type: string
      name:
        type: string
      provider:
        type: string
      regionVars:
        type: object
      updatedAt:
        type: string
      vars:
        type: string
    type: object
  dto.RegionCreate:
    properties:
      datacenter:
        type: string
      name:
        type: string
      provider:
        type: string
      regionVars:
        type: object
    required:
    - datacenter
    - name
    - provider
    - regionVars
    type: object
  dto.SessionUser:
    properties:
      email:
        type: string
      isActive:
        type: boolean
      isAdmin:
        type: boolean
      language:
        type: string
      name:
        type: string
      roles:
        items:
          type: string
        type: array
      userId:
        type: string
    type: object
  dto.User:
    properties:
      createdAt:
        type: string
      email:
        type: string
      id:
        type: string
      isActive:
        type: boolean
      isAdmin:
        type: boolean
      language:
        type: string
      name:
        type: string
      password:
        type: string
      type:
        type: string
      updatedAt:
        type: string
    type: object
  dto.UserCreate:
    properties:
      email:
        type: string
      isAdmin:
        type: boolean
      name:
        type: string
      password:
        type: string
    required:
    - email
    - isAdmin
    - name
    - password
    type: object
  dto.UserUpdate:
    properties:
      email:
        type: string
      id:
        type: string
      isActive:
        type: string
      isAdmin:
        type: string
      language:
        type: string
    type: object
  dto.VmConfig:
    properties:
      cpu:
        type: integer
      createdAt:
        type: string
      disk:
        type: integer
      memory:
        type: integer
      name:
        type: string
      provider:
        type: string
      updatedAt:
        type: string
    type: object
  dto.VmConfigCreate:
    properties:
      cpu:
        type: integer
      memory:
        type: integer
      name:
        type: string
      provider:
        type: string
    required:
    - cpu
    - memory
    - name
    type: object
  dto.VmConfigUpdate:
    properties:
      cpu:
        type: integer
      memory:
        type: integer
      name:
        type: string
      provider:
        type: string
    required:
    - cpu
    - memory
    - name
    type: object
  dto.Zone:
    properties:
      _:
        $ref: '#/definitions/model.IpPool'
        type: object
      cloudVars:
        type: object
      createdAt:
        type: string
      credentialId:
        type: string
      id:
        type: string
      ipPool:
        $ref: '#/definitions/dto.IpPool'
        type: object
      ipPoolId:
        type: string
      ipPoolName:
        type: string
      name:
        type: string
      provider:
        type: string
      regionID:
        type: string
      regionName:
        type: string
      status:
        type: string
      updatedAt:
        type: string
      vars:
        type: string
    type: object
  dto.ZoneCreate:
    properties:
      cloudVars:
        type: object
      credentialId:
        type: string
      ipPoolName:
        type: string
      name:
        type: string
      regionID:
        type: string
      regionName:
        type: string
    required:
    - cloudVars
    - name
    - regionID
    - regionName
    type: object
  model.BackupAccount:
    properties:
      bucket:
        type: string
      createdAt:
        type: string
      credential:
        type: string
      name:
        type: string
      status:
        type: string
      type:
        type: string
      updatedAt:
        type: string
    type: object
  model.ClusterBackupFile:
    properties:
      clusterBackupStrategyId:
        type: string
      clusterId:
        type: string
      createdAt:
        type: string
      folder:
        type: string
      id:
        type: string
      name:
        type: string
      updatedAt:
        type: string
    type: object
  model.ClusterSpec:
    properties:
      architectures:
        type: string
      calicoIpv4PoolIpip:
        type: string
      containerdStorageDir:
        type: string
      createdAt:
        type: string
      docker_subnet:
        type: string
      dockerStorageDir:
        type: string
      flannelBackend:
        type: string
      helmVersion:
        type: string
      ingressControllerType:
        type: string
      kubeApiServerPort:
        type: integer
      kubeMaxPods:
        type: integer
      kubeNetworkNodePrefix:
        type: integer
      kubePodSubnet:
        type: string
      kubeProxyMode:
        type: string
      kubeRouter:
        type: string
      kubeServiceSubnet:
        type: string
      kubernetesAudit:
        type: string
      lbKubeApiserverIp:
        type: string
      networkInterface:
        type: string
      networkType:
        type: string
      provider:
        type: string
      runtimeType:
        type: string
      supportGpu:
        type: string
      updatedAt:
        type: string
      upgradeVersion:
        type: string
      version:
        type: string
      workerAmount:
        type: integer
      yumOperate:
        type: string
    type: object
  model.Ip:
    properties:
      address:
        type: string
      clusterId:
        type: string
      createdAt:
        type: string
      dns1:
        type: string
      dns2:
        type: string
      gateway:
        type: string
      id:
        type: string
      ipPoolId:
        type: string
      status:
        type: string
      updatedAt:
        type: string
    type: object
  model.IpPool:
    properties:
      createdAt:
        type: string
      description:
        type: string
      id:
        type: string
      ips:
        items:
          $ref: '#/definitions/model.Ip'
        type: array
      name:
        type: string
      subnet:
        type: string
      updatedAt:
        type: string
    type: object
  model.MultiClusterRepository:
    properties:
      branch:
        type: string
      createdAt:
        type: string
      gitTimeout:
        type: integer
      lastSyncHead:
        type: string
      lastSyncTime:
        type: string
      message:
        type: string
      name:
        type: string
      password:
        type: string
      source:
        type: string
      status:
        type: string
      syncEnable:
        type: boolean
      syncInterval:
        type: integer
      syncStatus:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  model.Volume:
    properties:
      createdAt:
        type: string
      hostId:
        type: string
      id:
        type: string
      name:
        type: string
      size:
        type: string
      updatedAt:
        type: string
    type: object
  page.Page:
    properties:
      items:
        type: object
      total:
        type: integer
    type: object
info:
  contact:
    email: support@fit2cloud.com
    name: Fit2cloud Support
    url: https://www.fit2cloud.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://kubeoperator.io
  title: KubeOperator Restful API
paths:
  /auth/session/:
    delete:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      summary: Logout
      tags:
      - auth
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginCredential'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Profile'
      summary: Login
      tags:
      - auth
  /backupAccounts/:
    get:
      consumes:
      - application/json
      description: Show backupAccounts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/page.Page'
      security:
      - ApiKeyAuth: []
      summary: Show all backupAccounts
      tags:
      - backupAccounts
    patch:
      consumes:
      - application/json
      description: Update a credential
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CredentialUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Credential'
      security:
      - ApiKeyAuth: []
      summary: Update a credential
      tags:
      - credentials
    post:
      consumes:
      - application/json
      description: create a backupAccount
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BackupAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BackupAccount'
      security:
      - ApiKeyAuth: []
      summary: Create a backupAccount
      tags:
      - backupAccounts
  /backupAccounts/{name}/:
    delete:
      consumes:
      - application/json
      description: delete a  credential by name
      produces:
      - application/json
      security:
      - ApiKeyAuth: []
      summary: Delete a credential
      tags:
      - credentials
    patch:
      consumes:
      - application/json
      description: Update a backupAccount
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.BackupAccountRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.BackupAccount'
      security:
      - ApiKeyAuth: []
      summary: Update a backupAccount
      tags:
      - backupAccounts
  /cluster/backup/files/:
    get:
      consumes:
      - application/json
      description: Show backupFiles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/page.Page'
      security:
      - ApiKeyAuth: []
      summary: Show all backupFiles
      tags:
      - backupFiles
  /cluster/backup/files/{name}/:
    delete:
      consumes:
      - application/json
      description: delete a BackupFile by name
      produces:
      - application/json
      security:
      - ApiKeyAuth: []
      summary: Delete a BackupFile
      tags:
      - backupFiles
  /cluster/backup/files/backup/:
    post:
      consumes:
      - application/json
      description: Backup CLuster
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ClusterBackupFileCreate'
      produces:
      - application/json
      responses:
        "200": {}
      security:
      - ApiKeyAuth: []
      summary: Backup CLuster
      tags:
      - backupFiles
  /cluster/backup/files/restore/:
    post:
      consumes:
      - application/json
      description: Restore CLuster
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ClusterBackupFileRestore'
      produces:
      - application/json
      responses:
        "200": {}
      security:
      - ApiKeyAuth: []
      summary: Restore CLuster
      tags:
      - backupFiles
  /cluster/backup/strategy/:
    post:
      consumes:
      - application/json
      description: create a Backup Strategy
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ClusterBackupStrategyRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ClusterBackupStrategy'
      security:
      - ApiKeyAuth: []
      summary: Create a Backup Strategy
      tags:
      - backupStrategy
  /cluster/backup/strategy/{clusterName}/:
    get:
      consumes:
      - application/json
      description: Get Cluster Backup Strategy
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ClusterBackupStrategy'
      security:
      - ApiKeyAuth: []
      summary: Get Cluster Backup Strategy
      tags:
      - backupStrategy
  /clusters/:
    get:
      consumes:
      - application/json
      description: Show clusters
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/page.Page'
      security:
      - ApiKeyAuth: []
      summary: Show all clusters
      tags:
      - clusters
    post:
      consumes:
      - application/json
      description: Create a cluster
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ClusterCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Cluster'
      security:
      - ApiKeyAuth: []
      summary: Create a cluster
      tags:
      - clusters
  /clusters/{name}/:
    delete:
      consumes:
      - application/json
      description: delete a cluster by name
      produces:
      - application/json
      security:
      - ApiKeyAuth: []
      summary: Delete a cluster
      tags:
      - clusters
    get:
      consumes:
      - application/json
      description: Show a cluster
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Cluster'
      security:
      - ApiKeyAuth: []
      summary: Show a cluster
      tags:
      - clusters
  /clusters/import/:
    post:
      consumes:
      - application/json
      description: import a cluster
      produces:
      - application/json
      security:
      - ApiKeyAuth: []
      summary: Import a cluster
      tags:
      - clusters
  /clusters/node/{clusterName}:
    get:
      consumes:
      - application/json
      description: Get cluster nodes
      produces:
      - application/json
      security:
      - ApiKeyAuth: []
      summary: Get cluster nodes
      tags:
      - clusters
  /credentials/:
    get:
      consumes:
      - application/json
      description: Show credentials
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/page.Page'
      security:
      - ApiKeyAuth: []
      summary: Show all credentials
      tags:
      - credentials
    post:
      consumes:
      - application/json
      description: create a credential
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.CredentialCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Credential'
      security:
      - ApiKeyAuth: []
      summary: Create a credential
      tags:
      - credentials
  /hosts/:
    get:
      consumes:
      - application/json
      description: Show hosts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/page.Page'
      security:
      - ApiKeyAuth: []
      summary: Show all hosts
      tags:
      - hosts
    post:
      consumes:
      - application/json
      description: create a host
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.HostCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Host'
      security:
      - ApiKeyAuth: []
      summary: Create a host
      tags:
      - hosts
  /hosts/{name}/:
    delete:
      consumes:
      - application/json
      description: delete a host by name
      produces:
      - application/json
      security:
      - ApiKeyAuth: []
      summary: Delete a host
      tags:
      - hosts
    get:
      consumes:
      - application/json
      description: show a host by name
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Host'
      security:
      - ApiKeyAuth: []
      summary: Show a host
      tags:
      - hosts
  /hosts/template/:
    get:
      consumes:
      - application/json
      description: download template file for import hosts
      produces:
      - application/json
      security:
      - ApiKeyAuth: []
      summary: Download Host Template File
      tags:
      - hosts
  /hosts/upload/:
    post:
      consumes:
      - multipart/form-data
      description: Upload File for import hosts
      produces:
      - application/json
      security:
      - ApiKeyAuth: []
      summary: Upload File for import
      tags:
      - hosts
  /ippools/:
    get:
      consumes:
      - application/json
      description: Show hosts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/page.Page'
      security:
      - ApiKeyAuth: []
      summary: Show all hosts
      tags:
      - ippools
    post:
      consumes:
      - application/json
      description: create a IpPool
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.IpPoolCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.IpPool'
      security:
      - ApiKeyAuth: []
      summary: Create a IpPool
      tags:
      - ippools
  /ippools/{name}:
    get:
      consumes:
      - application/json
      description: get a IpPool
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.IpPool'
      security:
      - ApiKeyAuth: []
      summary: Get IpPool
      tags:
      - ippools
  /ippools/{name}/ips:
    patch:
      consumes:
      - application/json
      description: Update a Ip
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.IpUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Ip'
      security:
      - ApiKeyAuth: []
      summary: Update a Ip
      tags:
      - ips
    post:
      consumes:
      - application/json
      description: create a Ip
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.IpCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Ip'
      security:
      - ApiKeyAuth: []
      summary: Create a Ip
      tags:
      - ips
  /ippools/{name}/ips/:
    get:
      consumes:
      - application/json
      description: Show ips by ipPoolName
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/page.Page'
      security:
      - ApiKeyAuth: []
      summary: Show ips by ipPoolName
      tags:
      - ips
  /logs/:
    get:
      consumes:
      - application/json
      description: Show system_logs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/page.Page'
      security:
      - ApiKeyAuth: []
      summary: Show all system_logs
      tags:
      - system_logs
  /plans/:
    get:
      consumes:
      - application/json
      description: Show plans
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/page.Page'
      security:
      - ApiKeyAuth: []
      summary: Show all plans
      tags:
      - plans
    post:
      consumes:
      - application/json
      description: create a plan
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.PlanCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Plan'
      security:
      - ApiKeyAuth: []
      summary: Create a plan
      tags:
      - plans
  /plans/{name}/:
    delete:
      consumes:
      - application/json
      description: delete a plan by name
      produces:
      - application/json
      security:
      - ApiKeyAuth: []
      summary: Delete a plan
      tags:
      - plans
    get:
      consumes:
      - application/json
      description: show a plan by name
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Plan'
      security:
      - ApiKeyAuth: []
      summary: Show a Plan
      tags:
      - plans
  /project/members/:
    get:
      consumes:
      - application/json
      description: Show projectMembers by projectName
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/page.Page'
      security:
      - ApiKeyAuth: []
      summary: Show projectMembers by projectName
      tags:
      - projectMembers
    post:
      consumes:
      - application/json
      description: create a projectMember
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ProjectMemberCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ProjectMember'
      security:
      - ApiKeyAuth: []
      summary: Create a projectMember
      tags:
      - projectMembers
  /project/resource/:
    get:
      consumes:
      - application/json
      description: Show projectResources by projectName and resourceType
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/page.Page'
      security:
      - ApiKeyAuth: []
      summary: Show projectResources by projectName and resourceType
      tags:
      - projectResources
  /projects/:
    get:
      consumes:
      - application/json
      description: Show projects
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/page.Page'
      security:
      - ApiKeyAuth: []
      summary: Show all projects
      tags:
      - projects
    post:
      consumes:
      - application/json
      description: create a project
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ProjectCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Project'
      security:
      - ApiKeyAuth: []
      summary: Create a project
      tags:
      - projects
  /projects/{name}/:
    delete:
      consumes:
      - application/json
      description: delete a  project by name
      produces:
      - application/json
      security:
      - ApiKeyAuth: []
      summary: Delete a project
      tags:
      - projects
    get:
      consumes:
      - application/json
      description: show a project by name
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Project'
      security:
      - ApiKeyAuth: []
      summary: Show a project
      tags:
      - projects
    patch:
      consumes:
      - application/json
      description: Update a project
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ProjectUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Project'
      security:
      - ApiKeyAuth: []
      summary: Update a project
      tags:
      - projects
  /regions/:
    get:
      consumes:
      - application/json
      description: Show regions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/page.Page'
      security:
      - ApiKeyAuth: []
      summary: Show all regions
      tags:
      - regions
    post:
      consumes:
      - application/json
      description: create a region
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.RegionCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Region'
      security:
      - ApiKeyAuth: []
      summary: Create a region
      tags:
      - regions
  /regions/{name}/:
    delete:
      consumes:
      - application/json
      description: delete a region by name
      produces:
      - application/json
      security:
      - ApiKeyAuth: []
      summary: Delete a region
      tags:
      - regions
    get:
      consumes:
      - application/json
      description: show a region by name
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Region'
      security:
      - ApiKeyAuth: []
      summary: Show a Region
      tags:
      - regions
  /users/:
    get:
      consumes:
      - application/json
      description: Show users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/page.Page'
      security:
      - ApiKeyAuth: []
      summary: Show all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: create a user
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Host'
      security:
      - ApiKeyAuth: []
      summary: Create a user
      tags:
      - users
  /users/{name}/:
    delete:
      consumes:
      - application/json
      description: delete a user by name
      produces:
      - application/json
      security:
      - ApiKeyAuth: []
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: show a user by name
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.User'
      security:
      - ApiKeyAuth: []
      summary: Show a user
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Update a user
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.User'
      security:
      - ApiKeyAuth: []
      summary: Update a user
      tags:
      - users
  /vm/config/:
    post:
      consumes:
      - application/json
      description: create a VmConfig
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.VmConfigCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VmConfig'
      security:
      - ApiKeyAuth: []
      summary: Create a VmConfig
      tags:
      - vmConfigs
  /vm/config/{name}/:
    patch:
      consumes:
      - application/json
      description: Update a vmConfig
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.VmConfigUpdate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.VmConfig'
      security:
      - ApiKeyAuth: []
      summary: Update a vmConfig
      tags:
      - vmConfigs
  /vm/configs/:
    get:
      consumes:
      - application/json
      description: Show vmConfigs
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/page.Page'
      security:
      - ApiKeyAuth: []
      summary: Show all vmConfigs
      tags:
      - vmConfigs
  /zones/:
    get:
      consumes:
      - application/json
      description: Show zones
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/page.Page'
      security:
      - ApiKeyAuth: []
      summary: Show all zones
      tags:
      - zones
    post:
      consumes:
      - application/json
      description: create a zone
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ZoneCreate'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Zone'
      security:
      - ApiKeyAuth: []
      summary: Create a zone
      tags:
      - zones
  /zones/{name}/:
    delete:
      consumes:
      - application/json
      description: delete a zone by name
      produces:
      - application/json
      security:
      - ApiKeyAuth: []
      summary: Delete a zone
      tags:
      - zones
    get:
      consumes:
      - application/json
      description: show a zone by name
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.Zone'
      security:
      - ApiKeyAuth: []
      summary: Show a zone
      tags:
      - zones
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
